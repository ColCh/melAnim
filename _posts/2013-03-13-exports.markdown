---
layout: default
title: Описание экспортов
category: Описание библиотеки
---
Use numbered headers: true

{:js: lang=javascript class=prettyprint}

Здесь будет представлено в общих чертах, под какими переменными `melAnim` экспортируется в глобальную область видимости и аргументы к экспортированным функциям. 
При встрече типа, будет ссылка на его детальное определение.
{: .lead}

# Содержание #

* table of contents
{:toc}

# Общие экспорты #

Проект экспортируется в глобальное пространство имён под именем вызываемого объекта `melAnim`, что является ссылкой на процедурную функцию анимирования.
К ней подмешаны несколько свойств.

# Структура melAnim #

`melAnim`
:ссылка на функцию `animate`

`CSSAnimation`
:конструктор анимаций на CSS (W3C)

`ClassicAnimation`
:конструктор анимаций CSS на JavaScript. Реализация стандарта CSS3 анимаций

`hooks`
:объект с операциями, хранящими функции, помогающие представлять, интерполировать и отрисовывать незнакомые свойства

`aliases`
:объект с алиасами для временных ключей или функций смягчения

`vendorize`
:ссылка на функцию `getVendorPropname`, помогающей подобрать вендорный префикс к свойству стилей, ГО или любого другого объекта

`beforeReflow`
:либо ссылка на встроенную функцию `requestAnimationFrame`, либо её реализация на *JavaScript*

`css`
:ссылка на функцию `css`, отвечающую за присваивание и получение строкового значения свойств из стилей

`normalize`
:ссылка на функцию `normalize`, отвечающую за перевод строкового значения свойства в машино-читабельное и обратно

{: .dl-horizontal}

*[ГО]: Глобальный объект
*[машино-читабельное]: Числовое представление

Следует немного уточнить насчёт некоторых свойств :

## melAnim.hooks ##
Объект хранит в себе хуки для расширения списка свойств, поддающихся анимированию.

### Структура melAnim.hooks ###
Делится на несколько подуровней. На *первом* имя свойства, на *втором* - операции. На каждую *операцию* можно установить только **один** обработчик.

#### Список предопределённых операций ####

`"get"` или `melAnim.hooks.GET`
: получение строкового значения свойства.  *Формат аргументов пока не определён*{: class=text-error}

`"set"` или `melAnim.hooks.SET`
: установка строкового значения свойства (отрисовка).  *Формат аргументов пока не определён*{: class=text-error}

`"blend"` или `melAnim.hooks.BLEND`
: вычисление значения между двумя точками по известному прогрессу перемещения между ними.  *Формат аргументов пока не определён*{: class=text-error}

`"normalize"` или `melAnim.hooks.NORMALIZE`
: перевод значения свойства из строкового в машино-читабельный - пригодный для действия `blend`.  *Формат аргументов пока не определён*{: class=text-error}

`"stringize"` или `melAnim.hooks.STRINGIZE`
: перевод значения свойства из машино-читабельного в строковый.  *Формат аргументов пока не определён*{: class=text-error}

#### Пример ####
    
    /*
     *HOOKS [ PROPERTY_NAME ] = {
     *    ACTION: HANDLER
     *}
     */
    melAnim.hooks[ "double-width" ] = {
        'get': function (/* args */) { /* hook body */ },
        'set': function (/* args */) { /* hook body */ },
        'blend': function (/* args */) { /* hook body */ }
        // ну и так далее
    };
    
{:js}

## melAnim.aliases ##

Встроенные алиасы определены в файле **aliases.js**, их включение в конечный код регулируется флагом `INCLUDE_ALIASES`
{: .text-info}

### Структура melAnim.aliases ###

*Приближения кубических кривых не могут использоваться в CSS анимации*{: .text-warning .lead}

`"keys"`
:алиасы для временных ключей. Примером таких же алиасов можно считать строки `from` и `to` из ключей CSS3 Animation

`"bezierPoints"`
:аргументы к временной функции CSS "кубической кривой Безье". Точки отсюда могут использоваться как в *CSS* анимации, так и в анимации на *JavaScript*

`"bezierApprox"`
:приближения кубических кривых. Хранят в себе обычные *JS*-функции, которые являются приближениями одноимённой кубической кривой из алиасов опорных точек. 

#### Примеры ####

Определение алиаса времени ключевого кадра 

    melAnim.aliases.keys[ "half" ] = 50;
    // теперь можно указывать "half" вместо "50"
{:js}

Определение алиаса к точкам кубической кривой Безье

    melAnim.aliases.bezierPoints[ "my-linear" ] = [ 0.0, 0.0, 1.0, 1.0 ];
    // теперь можно указывать "my-linear" как функцию смягчения
    
{:js}

Определение алиаса к приближению кубической кривой. *Формат аргументов пока не определён*{: class=text-error}.

    melAnim.aliases.bezierApprox[ "my-linear" ] = function (/* easing args */) { /* easing body */ };
    // теперь можно указывать "my-linear" как функцию смягчения, но только для JS-анимации

{:js}